{"remainingRequest":"/home/alya/project/Pathfinding/node_modules/babel-loader/lib/index.js!/home/alya/project/Pathfinding/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/alya/project/Pathfinding/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alya/project/Pathfinding/src/components/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alya/project/Pathfinding/src/components/Index.vue","mtime":1680303774140},{"path":"/home/alya/project/Pathfinding/node_modules/cache-loader/dist/cjs.js","mtime":1676881085187},{"path":"/home/alya/project/Pathfinding/node_modules/babel-loader/lib/index.js","mtime":1676881153360},{"path":"/home/alya/project/Pathfinding/node_modules/cache-loader/dist/cjs.js","mtime":1676881085187},{"path":"/home/alya/project/Pathfinding/node_modules/vue-loader/lib/index.js","mtime":1676881168702},{"path":"/home/alya/project/Pathfinding/node_modules/cache-loader/dist/cjs.js","mtime":1676881085187},{"path":"/home/alya/project/Pathfinding/node_modules/babel-loader/lib/index.js","mtime":1676881153360},{"path":"/home/alya/project/Pathfinding/node_modules/cache-loader/dist/cjs.js","mtime":1676881085187},{"path":"/home/alya/project/Pathfinding/node_modules/vue-loader/lib/index.js","mtime":1676881168702}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"AAmWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAf;QACAC;MACA;MACAe;QACA;MAAA,CACA;MACAC;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAEA;EACA;;EACAC;IACA;IAEA;MACA;MACA;QAEA;UACAC;QACA,OACA;UACAA;QACA,OACA;UACAA;QACA;MACA;MACA;IACA;IACAC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;EACA;;EACAC;IACA;IACA;IACA;MACA;MACA;IACA;IACAC;EAGA;EAEAC;IAEAC;MACA;QACA;MAEA;IACA;IACA;IACA;IACA;IACA;EAGA;;EAGAC;IACA;IACA;IACA;IACAC;MACA;MACA;QACA;MACA;MACA;MACAN;MACA;MACA;MACA;MACA;MACA;MACA;MACAA;MACAA;MACAA;MACAA;MACA;MACA;MACA;MACA;MACA;MACA;MACAO;MACA;MACA;;MAEA;;MAEA;MACA;IACA;;IACAC;MACA;MACAR;MACA;QACA;QACAA;MAEA,OACA;QACA;MAEA;IACA;IACAS;MACA;MACA;IAEA;IACAC;MACA;MACA;IACA;IAEAC;MAEAX;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACAY;;MAGA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;QACAC;QACA;MACA;MACA;IAIA;IACAC;MACA;MACA;MAEA;QACA;MACA;MACAd;MACA;MAEA;MACAe;QACAf;QACA;QAEAgB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAGA;;QAGA;MACA;;MACAD;IAKA;IAEAE;MACA;QACAjB;QACA;QACA;QACA;QACA;QACA;QACAA;QACAA;MAEA;IACA;IACAkB;MACAC;IACA;IACAC;MACA;MAEA;MAEApB;MACA;MACA;QACAqB;MACA;MAEArB;MAEA;MAKA;QACAA;QACA;QACAqB;UACAC;UACAC;UACAC;QACA;MAEA;MAEAH;QACAC;QACAC;QACAC;MACA;MAEA;IAEA;IAEAC;MAEA;QACA9D;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAoD;QACAlD;QACAC;QACAC;QACAK;QACAD;MACA;MAGA;MACA;QAAA6C;MAAA;MACA;MACA;MACAC;MACAA;MACAT;MACAS;MACAT;MACAU;MAGA;MACA7B;IACA;IAIA8B;MACA;MAEA;MACA9B;MACA;MAGA;MAGA;QACAqB;MACA;MAEA;QACA;QACAA;UACAC;UACAC;UACAC;QACA;MAEA;MAEAH;QACAC;QACAC;QACAC;MACA;MAEA;IACA;IACAO;MACA;QACA;QACA/B;QACA;UACA;QACA;QACA;QACA;UACAgC;UACAC;QACA;MACA;IACA;IACAC;MACA;QACA;UACA;QACA;QACA;QACA;QACAC,mBACAA,oBACAA,oBACAC,OACAA,MACA;MACA;IACA;IACAC;MACA;QACA;QACA;UACA;QACA;QACA;QACA;QACA;UACA,OACAC;QAEA;QACA;UACA;QACA;QACAtC;QACA;QACA;QACA,qBACAuC,iDACAA,+CACA;QACA;UACAP;UACAQ;UACAC,GACAF,6CACAA,kDACA;UACAG,GACAH,6CACAA,kDACA;QACA;QAEA;QACA;QACAvC;QACAA;QACAA;QAEAmC;QACAA,mBACAA,oBACAA,oBACA5B,cACAA,aACA;QAEA;UACA;QACA;QACAP;QAEAA;QACAA;QACAA;MAGA;IAGA;IACA2C;MACA;QACA;QACA;QACA3C;QACAA;;QAEA;QACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;QAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;QAEA;UACA;QACA;QAEA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;;UAEA;UACA4C;UACAC;UACAC;UACAC;QACA;MAEA;MACA,4BACA;MACA;QACA;QACA;MACA;IAIA;IACAC;MACA;QACA;QACA;QACA;QACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;QAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;MAEA;MACA,4BACA;MAEA;QACA;QACA;MAEA;IACA;IAGAC;MACA;MACA;MACAjD;MACAA;MACA;MAGA;QACA,qBACAuC,0CACAA,wCACA;QACAW;UAAA5B;UAAA6B;QAAA;MACA;MAEA;IAEA;IACAC;MACA;MACA;QACA;QACA;UACAC;QACA;QACA1F;MACA;MACA;MACAqC;MACAA;IACA;IAEA;IACAsD;MACA;QACAC;QACAC;QACAhB;QACAiB;QACAC;QACAC;UACAC;UACAC;UACAC;QACA;MACA;IAEA;IAEAC;MAGA;QAEAC;UACA;QACA;MAGA;MACAA;QACA;MACA;IAEA;IAEAC;MACA;MAEA;MACA;MAEA;MACAjE;MACA;MAIA;MACA;MACA;MAGA;MACA;MAGA;QACAsB;QAEAC;QACAC;MACA;MACAxB;MAEA;QACAsB;QAEAC;QACAC;MACA;MAEAxB;IACA;IAEAkE;MACA;;MAEA;MACA;MAIA;MACA;MAEA;MACAlE;MACA;MAIA;MACA;MACA;MAGA;MACA;MAGA;QACAsB;QACAE;MACA;MACAxB;MAEA;QACAsB;QAEAC;QACA;QACAC;MACA;MAEAxB;IAEA;IAEAmE;MAEA;QAEAH;UACA;QACA;MAEA;IACA;IACAI;MACA;MACA;QACA;QACA;QACA;MACA;MAEA;QACA;QAEA;QACA;QAEA;UACA;UACAC;UACAA;QACA;QACA;UACA;UACAA;UACAA;QACA;MAEA;MAEA;QAEAL;UACA;QACA;MAEA;IACA;IACAM;MACA;MACA;MACA;MACA;IAGA;IACAC;MACA;MACA;MACA;MACA;IAGA;IACAC;MACA;MACA;MACA;MACA;MACAxE;MACAA;MAEA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MACAyE;MACAC;MAGA;QACA;QACA;QACA;QACA9B;QACAC;MAGA;;MAEA;MACA8B;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC;MACAC;MACAC;MACAC;MAEAC;MACAA;MAEAL;MAEA;IAEA;IACAM;MACA;MACA;MACA;MACA;MAGAjF;MACAA;MAEA;;MAEA;MACA;;MAEA;MACA;MACA;MACA;MACAyE;MACAC;MAGA;QACA;QACA;QACA;QACA9B;QACAA;QACAC;QACAA;QACAA;MAEA;;MAEA;MACA8B;MAEA;IAEA;IACAO;MACA;MACA;MACA;MACA;MACA;IAEA;IAEAC;MAEA;QAEA;QACA;UACA;QACA,OACA;UACA;QACA,OACA;UACA;QACA,OACA;UACA;QACA,OACA;UACA;QACA;;QAEA;QACAnF;QACAA;QACAA;QACA;MAEA;IACA;EAEA;AAEA","names":["data","file","fileContents","objectUrl","grid","startNode","goalNode","prevStartNode","prevGoalNode","optionsStartNode","list","edges","distances","connection","vertex","connections","drawingLine","runnableGraph","selectedItem","coor","stageSize","width","height","tableData","theStage","cantPlayPrev","cantPlayNext","cantrunShortPath","visitedCount","visitedNodesInOrder","calculatedPath","listNodesFrom","listNodesTo","outputNodesFrom","outputNodesTo","labelResult","stageConfigTree","nodes","arrows","created","arr","console","mounted","observer","computed","optionsGoalNode","methods","handleDragMove","e","onclickDrop","addingConnection","addingVertex","clearScreen","stage","URL","onFileSelected","reader","result","handleClick","chooseFiles","document","changeColorStart","tween","node","fill","stroke","savefile","drawing","type","link","window","changeColorGoal","handleMouseDown","id","points","handleMouseMove","lastLine","pos","handleMouseUp","point","Math","distance","x","y","next","cell1","cell2","cell3","cell4","prev","createHeuristic","heuristic","hval","initializeGrid","currentRow","createNode","point1","point2","isVisited","previousNode","cost","F","G","H","animateAlgorithm","setTimeout","colorNode","undoColorNode","animateShortestPath","getPath","table","visualizeBFS","visualizeDFS","visualizeAStar","headerCell1","headerCell2","myDiv","headerCell1o","headerCell2o","headerCell3o","headerCell4o","otherTable","visualizeGreedyBFS","visualizeUniformCost","runGraph"],"sourceRoot":"src/components","sources":["Index.vue"],"sourcesContent":["<template>\r\n<div class=\"row\">\r\n<div class=\"sidebar\">\r\n        <h1 class=\"mt-4\">Pathfinding</h1>\r\n        <h1> Visualizer</h1>\r\n        <div class=\"grid-container mx-4 mt-3\">\r\n          <div class=\"button-div1 mx-3\">\r\n             <b-dropdown block class=\"ml-2 algobtn \" :text=\"selectedItem\" v-model=\"selectedItem\" >\r\n                <b-dropdown-header id=\"unweighted\">\r\n                  Unweighted\r\n                </b-dropdown-header>\r\n                <b-dropdown-item-button :key=\"'BFS'\" @click=\"onclickDrop('BFS')\"  aria-describedby=\"unweighted\">\r\n                  BFS\r\n                </b-dropdown-item-button>\r\n                <b-dropdown-item-button :key=\"'DFS'\" @click=\"onclickDrop('DFS')\"  aria-describedby=\"unweighted\" >\r\n                  DFS\r\n                </b-dropdown-item-button>\r\n                <b-dropdown-header id=\"weighted\">\r\n                  Weighted\r\n                </b-dropdown-header>\r\n                <b-dropdown-item-button :key=\"'Uniform Cost'\" @click=\"onclickDrop('Uniform Cost')\"  aria-describedby=\"unweighted\">\r\n                  Uniform Cost\r\n                </b-dropdown-item-button>\r\n                <b-dropdown-item-button :key=\"'Greedy BFS'\" @click=\"onclickDrop('Greedy BFS')\"  aria-describedby=\"unweighted\">\r\n                  Greedy BFS\r\n                </b-dropdown-item-button>\r\n                <b-dropdown-item-button :key=\"'A*'\" @click=\"onclickDrop('A*')\"  aria-describedby=\"unweighted\">\r\n                  A*\r\n                </b-dropdown-item-button>\r\n              \r\n            </b-dropdown>\r\n          </div>\r\n          <div class=\"button-div2 ml-4 mr-2 mt-2\">\r\n             <input id=\"fileUpload\" type=\"file\" @change=\"onFileSelected\" hidden>\r\n             <b-button block  @click=\"chooseFiles()\"  > Import Graph </b-button>\r\n          </div>\r\n          <div class=\"button-div3 mr-3 mt-2\">\r\n              <b-button block @click=\"savefile\"> Save Graph </b-button>\r\n          </div>\r\n          <div class=\"button-div4\">\r\n             <h6 class=\"mt-3\"> <b>Add to Graph </b></h6>\r\n          </div>\r\n          <div class=\"button-div5 ml-4 mr-2 mt-2\">\r\n              <b-button block class=\"btn btn-secondary\" @click=\"addingVertex\" >\r\n                Vertex\r\n              </b-button>\r\n          </div>\r\n          <div class=\"button-div6 mr-3 mt-2\">\r\n             <b-button block  class=\"btn btn-secondary\" @click=\"addingConnection\">\r\n                Connection\r\n              </b-button>\r\n          </div>\r\n          <!-- </div> -->\r\n          <!-- <div class=\"button-div7\"></div>\r\n          <div class=\"button-div8\"></div> -->\r\n          <div class=\"button-div8 ml-3 mr-4\">\r\n             <b-button block class=\"btn ml-2 mr-3 btn-secondary\" @click=\"runGraph\">Visualize Algo</b-button>\r\n          </div>\r\n          <div class=\"button-div10 ml-3 mr-4\">\r\n             <b-button :disabled=\"cantrunShortPath\" block class=\"btn ml-2 mr-3 btn-secondary\" @click=\"getPath\">Get the Path</b-button>\r\n          </div>\r\n          <div class=\"button-div9 ml-3 mr-4\">\r\n             <b-button block class=\"btn ml-2 mr-3 btn-secondary \" @click=\"clearScreen\">Clear Graph</b-button>\r\n          </div>\r\n          <!--  <div class=\"button-div7\"> -->\r\n            <b-form inline class=\"button-div7 mx-3 mb-2\" > \r\n              <div class=\"button-div10 mx-2 \">\r\n              \r\n                  <label class=\"\" for=\"start-node\">Start node:</label>\r\n                  <b-form-select\r\n                    @change=\"changeColorStart\"\r\n                    id=\"start-node\"\r\n                    class=\"\"\r\n                    :options=\"optionsStartNode\"\r\n                    v-model=\"startNode\"\r\n                    :value=\"null\"\r\n                  ></b-form-select>\r\n              </div>\r\n              <div class=\"button-div11\">\r\n                <label class=\"\" for=\"end-node\">Goal node:</label>\r\n                <b-form-select\r\n                  id=\"end-node\"\r\n                  class=\"\"\r\n                  @change=\"changeColorGoal\"\r\n                  :options=\"optionsGoalNode\"\r\n                  v-model=\"goalNode\"\r\n                  :value=\"null\"\r\n                ></b-form-select>\r\n              </div>\r\n            </b-form>\r\n         \r\n        \r\n          \r\n        </div>\r\n       \r\n      \r\n    </div>\r\n\r\n\r\n    <div class=\"main container\">\r\n        <!-- <p> For the are viewers out there.. if you see this text, it means this is still under development. But you can view the algorithms, it's already done.. </p> -->\r\n      \r\n         <div class=\"row pt-4 ml-4\">\r\n            \r\n             <b-card class=\"col-7 drawArea\" id=\"drawArea\" style=\"height: 35rem\">\r\n                <v-stage\r\n                  :config=\"stageSize\"\r\n                  @click=\"handleClick\"\r\n                  ref=\"konva\"\r\n                  @mousedown=\"handleMouseDown\"\r\n                  @mouseup=\"handleMouseUp\"\r\n                  @mousemove=\"handleMouseMove\"\r\n                >\r\n                <v-layer ref=\"layer\">\r\n                      <v-line\r\n                        v-for=\"line in connections\"\r\n                        :key=\"line.id\"\r\n                        :config=\"{\r\n                          stroke: 'black',\r\n                          points: line.points,\r\n                          id: line.id\r\n                          \r\n                        }\"\r\n                      />\r\n\r\n                    <v-circle\r\n                      \r\n                      v-for=\"(item, index) in list\"\r\n                      :key=\"item.id\"\r\n\r\n                      :config=\"{\r\n                        x: item.x,\r\n                        y: item.y,\r\n                        \r\n                        radius: 15,\r\n                        fill: '#a20417',\r\n                        //draggable:true,\r\n                        stroke: '#a20417',\r\n                        strokeWidth: 2,\r\n                        id:'circle'+index\r\n                      }\"\r\n                    ></v-circle>\r\n                  <v-text\r\n                    v-for=\"(item, index) in list\"\r\n                    :key=\"item.id\"\r\n                    :config=\"{\r\n                      x: item.x + 11,\r\n                      y: item.y + 11,\r\n                      text: index,\r\n                      fontSize: 15,\r\n                      width: 300,\r\n                    }\" \r\n                  ></v-text>\r\n                  <v-text\r\n                    v-for=\"label in distances\"\r\n                    :key=\"label.id\"\r\n                    :config=\"{\r\n                      x: label.x,\r\n                      y: label.y,\r\n                      text: label.distance,\r\n                    }\"\r\n                  />\r\n            <p class=\"text-left\">Click Vertex button and click here to add vertex</p>\r\n            <!-- <v-text :key=\"label_txt\" :config=\"{ text: 'Click Vertex button and click here to add vertex'}\"/> -->\r\n                  </v-layer>\r\n                </v-stage>\r\n             </b-card>\r\n            \r\n                <b-card class=\"col-4 ml-3\" id=\"label\" style=\"height: 35rem\">\r\n                    <div class=\"row box-top\">\r\n\r\n                       <h4>Graph Details</h4>\r\n                       <button :disabled=\"cantPlayPrev\" @click=\"prev\" class=\"btn btn-outline-secondary rounded-circle play-button push-top mr-2\"> prev</button>\r\n                       <button :disabled=\"cantPlayNext\" @click=\"next\" class=\"btn btn-outline-secondary rounded-circle play-button mr-3\">next</button>\r\n                       <!-- <button :disabled=\"disablePath\" @click=\"getShortPath\" class=\"btn btn-outline-secondary rounded-circle play-button\">Get Path</button> -->\r\n                    </div>\r\n                    \r\n                    <div id=\"heuristic\"></div>\r\n                    <div id=\"astar\"></div>\r\n                    <div v-if=\"selectedItem ==='BFS' || selectedItem ==='DFS'\">\r\n                      <div class=\"row\">\r\n                        \r\n                        <p>Adjacency Matrix</p>\r\n                        \r\n                      </div>\r\n                      <table id=\"my-table\">\r\n                          \r\n                          <tbody>\r\n                            <tr v-for=\"(row, rowIndex) in tableData\" :key=\"rowIndex\">\r\n                              <td v-for=\"(cell, cellIndex) in row\" :key=\"cellIndex\" >{{ cell }}</td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      <div class=\"row mt-3\" id=\"distance-list\" >\r\n                        <div class=\"ml-1\">\r\n                        \r\n                          <p>{{ labelResult }}</p>\r\n                          \r\n                        </div>\r\n                       \r\n                        <table  class=\" mt-4\" id=\"resTable\">\r\n                          \r\n                          <tbody>\r\n                            <tr>\r\n                              <td v-if=\"listNodesFrom.length !=0\" class=\"stack\">From</td>\r\n                              <td class=\"stack\" v-for=\"from in listNodesFrom\"  :key=\"from\">{{ from }}</td>\r\n                              <!-- <td v-for=\"(item, index) in listNodes\" :key=\"item.id\">{{ cell }}</td> -->\r\n                            </tr>\r\n                            <tr>\r\n                              <td v-if=\"listNodesTo.length !=0\" class=\"stack\">To</td>\r\n                              <td class=\"stack\" v-for=\"toNode in listNodesTo\"  :key=\"toNode\">{{ toNode }}</td>\r\n                              <!-- <td v-for=\"(item, index) in listNodes\" :key=\"item.id\">{{ cell }}</td> -->\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                      <div class=\"row mt-3\" id=\"distance-list\" >\r\n                        <div class=\"ml-1\">\r\n                        \r\n                        <p>Output</p>\r\n                        \r\n                       </div>\r\n\r\n                        <table  class=\" mt-4\" >\r\n                          \r\n                          <tbody>\r\n                            <tr>\r\n                              <td v-if=\"outputNodesFrom.length !=0\" class=\"stack\">To</td>\r\n                              <td class=\"stack\" v-for=\"fromNodes in outputNodesFrom\"  :key=\"fromNodes\">{{ fromNodes }}</td>\r\n                              <!-- <td v-for=\"(item, index) in listNodes\" :key=\"item.id\">{{ cell }}</td> -->\r\n                            </tr>\r\n                            <tr>\r\n                              <td v-if=\"outputNodesTo.length !=0\" class=\"stack\">From</td>\r\n                              <td class=\"stack\" v-for=\"toNodes in outputNodesTo\"  :key=\"toNodes\">{{ toNodes }}</td>\r\n                              <!-- <td v-for=\"(item, index) in listNodes\" :key=\"item.id\">{{ cell }}</td> -->\r\n                            </tr>\r\n                            \r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div  v-if=\"!(selectedItem ==='BFS' || selectedItem ==='DFS')\">\r\n                      <v-stage ref=\"stageTree\" :config=\"stageConfigTree\">\r\n                        <v-layer ref=\"layerTree\">\r\n                                <v-line\r\n                                  v-for=\"line in arrows\"\r\n                                  :key=\"'arr-'+line.id\"\r\n                                  :config=\"{\r\n                                    stroke: 'black',\r\n                                    points: [nodes[line.point1].x,nodes[line.point1].y, nodes[line.point2].x, nodes[line.point2].y],\r\n                                    id: 'arr-'+line.id\r\n                                    \r\n                                  }\"\r\n                                />\r\n                                <v-group\r\n                                  v-for=\"(item, index) in nodes\"\r\n                                  :key=\"item.id\"\r\n                                  :id=\"'circleTree-'+index\"\r\n                                  @dragmove=\"handleDragMove\"\r\n                                  :config=\"{\r\n                                    x: item.x ,\r\n                                    y: item.y,\r\n                                    draggable: true,\r\n                                    \r\n                                  }\"\r\n                                  >\r\n                                  <v-ellipse\r\n                                    :key=\"'node' + item.id\"\r\n                                    :config=\"{\r\n                                      x: 0,\r\n                                      y: 0,\r\n                                      \r\n                                      radiusY: 10,\r\n                                      radiusX: 20,\r\n                                      fill: 'black',\r\n                                      //draggable:true,\r\n                                     \r\n                                      stroke: 'black',\r\n                                      strokeWidth: 1,\r\n                                      id:'ellipse'+index\r\n                                    }\"\r\n                                  ></v-ellipse>\r\n                                <v-text\r\n                                  :config=\"{\r\n                                    text: index,\r\n                                    x: 0-5,\r\n                                    y: 0-5,\r\n                                    text: index,\r\n                                    fontSize: 15,\r\n                                    fill:'white',\r\n                                    width: 300\r\n                                  }\"\r\n                                ></v-text>\r\n                                <v-text\r\n                                  :config=\"{\r\n                                    text: index,\r\n                                    x: 0-5,\r\n                                    y: 0+12,\r\n                                    text: index,\r\n                                    fontSize: 15,\r\n                                    fill:'black',\r\n                                    width: 300\r\n                                  }\"\r\n                                ></v-text>\r\n                              </v-group>  \r\n\r\n                              <!-- <v-ellipse\r\n                                \r\n                                v-for=\"(item, index) in nodes\"\r\n                                :key=\"item.id\"\r\n\r\n                                :config=\"{\r\n                                  x: item.x,\r\n                                  y: item.y,\r\n                                  \r\n                                  radiusY: 10,\r\n                                  radiusX: 20,\r\n                                  fill: 'black',\r\n                                  //draggable:true,\r\n                                  draggable: true ,\r\n                                  stroke: 'black',\r\n                                  strokeWidth: 1,\r\n                                  id:'circleTree'+index\r\n                                }\"\r\n                              ></v-ellipse>\r\n                            <v-text\r\n                              v-for=\"(item, index) in nodes\"\r\n                              :key=\"item.id+'txt'\"\r\n                              :config=\"{\r\n                                x: item.x-5,\r\n                                y: item.y-5,\r\n                                text: index,\r\n                                fontSize: 15,\r\n                                fill:'white',\r\n                                width: 300\r\n\r\n                              }\" \r\n                            ></v-text> -->\r\n                        </v-layer>\r\n                      </v-stage>\r\n                    </div>\r\n                </b-card>\r\n\r\n          \r\n\r\n         </div>\r\n         \r\n        \r\n    </div>\r\n\r\n</div>\r\n  \r\n</template>\r\n<script>\r\nimport { Layer } from 'vue-konva';\r\nimport Konva from \"konva\";\r\nimport {bfs} from '../algorithms/breadthFirstSearch';\r\nimport {dfs} from '../algorithms/depthFirstSearch';\r\nimport {greedyBFS} from '../algorithms/greedyBestFirstSearch';\r\nimport {astar} from '../algorithms/astar';\r\nimport {uniformCost} from '../algorithms/uniformCost';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      file: null, \r\n      fileContents: null,\r\n      objectUrl: null,\r\n      grid: null,\r\n      startNode: null,\r\n      goalNode: null,\r\n      prevStartNode: '',\r\n      prevGoalNode:'',\r\n      optionsStartNode:[],   \r\n      list: [],\r\n      edges: [],\r\n      distances: [],\r\n      connection: false,\r\n      vertex: false,\r\n      connections: [],\r\n      drawingLine: false,\r\n      runnableGraph: false,\r\n      selectedItem: \"Algorithms\",\r\n      coor: \"\",\r\n      stageSize: {\r\n          width: 200,\r\n          height: 200,\r\n        },\r\n      tableData:[],\r\n      theStage:[],\r\n      //this is for the animation so no need to import it\r\n      cantPlayPrev:true,\r\n      cantPlayNext:true,\r\n      cantrunShortPath:true,\r\n      visitedCount: 0,\r\n      visitedNodesInOrder: null, \r\n      calculatedPath: null,\r\n      listNodesFrom: [],\r\n      listNodesTo: [],\r\n      outputNodesFrom: [],\r\n      outputNodesTo: [],\r\n      labelResult:'Details',\r\n      stageConfigTree: {\r\n        width:300,\r\n        height: 450\r\n      },\r\n      nodes: [\r\n        // { id: 0, name: 'Root', x: 150, y: 20 },\r\n      ],\r\n      arrows:[\r\n\r\n      ]\r\n      // nodes: [\r\n      //   { id: 1, name: 'Root', x: 150, y: 20 },\r\n      //   { id: 2, name: 'Child 1', x: 55, y: 70 },\r\n      //   { id: 3, name: 'Child 2', x: 110  , y: 70},\r\n      //   { id: 4, name: 'Child 2', x: 165 , y: 70 },\r\n      //   { id: 5, name: 'Child 2', x: 220 , y: 70 },\r\n      //   { id: 6, name: 'grandchild 1', x: 40, y: 120 },\r\n      //   { id: 7, name: 'grandchild 2', x: 80  , y: 120},\r\n      //   { id: 8, name: 'grandchild 2', x: 120 , y: 120 },\r\n      //   { id: 9, name: 'grandchild 2', x: 160 , y: 120 }\r\n      // ],\r\n      // arrows:[\r\n      //   { id: 1, point1: 0 , point2: 2},\r\n      //   { id: 2, point1: 0 , point2: 3},\r\n      //   { id: 3, point1: 0 , point2: 4},\r\n      // ]\r\n     \r\n    };\r\n  },\r\n  created: function() {\r\n     this.initializeGrid();\r\n\r\n     for (let i = 0; i < 12; i++) {\r\n      let arr =[];\r\n      for (let j = 0; j < 12; j++) {\r\n       \r\n        if(i==0 && j!=0){\r\n          arr[j] = j-1;\r\n        }\r\n        else if(j==0 && i!=0 ){\r\n          arr[j] = i-1;\r\n        }\r\n        else{\r\n          arr[j] = \"0\";\r\n        }\r\n      }\r\n      this.tableData.push(arr);\r\n    }\r\n    console.log(this.tableData);\r\n    //  for (let i = 0; i < 22; i++) {\r\n    //       // Create a new row\r\n    //       const row = document.createElement('tr');\r\n    //       for (let j = 0; j < 22; j++) {\r\n    //         // Create a new cell and add it to the row\r\n    //          cell = document.createElement('td');\r\n    //         if(i==0 && j!=0){\r\n    //           cell.textContent = j-1;\r\n    //         }\r\n    //         else if(j==0 && i!=0 ){\r\n    //           cell.textContent = i-1;\r\n    //         }\r\n    //         else{\r\n    //           cell.textContent = \"0\";\r\n    //         }\r\n            \r\n    //         row.appendChild(cell);\r\n    //       }\r\n    //       // Add the row to the table\r\n    //       document.getElementById('matrix').appendChild(row);\r\n    //   }\r\n  },\r\n  mounted: function () {\r\n    //For Dynamic Stage Size\r\n    const container = document.querySelector(\".drawArea\");\r\n    const observer = new ResizeObserver(() => {\r\n      this.stageSize.width = container.offsetWidth;\r\n      this.stageSize.height = container.offsetHeight;\r\n    });\r\n    observer.observe(container);\r\n\r\n    \r\n  },\r\n \r\n  computed:{\r\n   \r\n    optionsGoalNode(){\r\n        return this.optionsStartNode.filter((node) => {\r\n            return node !== this.startNode;\r\n        \r\n        });\r\n    },   \r\n    // cellHasValue(){\r\n    //      const cells = document.querySelector(\"td\"); // Get all table cells\r\n    //      return Array.from(cells).some(cell => cell.textContent.trim() == 0 );\r\n    // }\r\n\r\n    \r\n  },\r\n\r\n  \r\n  methods: {\r\n    // handleDragEnd(){\r\n    //   console.log(\"handle Drag End works\")\r\n    // },\r\n    handleDragMove(e){\r\n      const onEllipse = e.target instanceof Konva.Group;\r\n      if (!onEllipse) {\r\n          return;\r\n      }\r\n      let id = parseInt(e.target.id().split('-').pop());\r\n      console.log(this.nodes[id]);\r\n      const stage = e.target.getStage();\r\n      var shape = stage.findOne('#circleTree-'+id);\r\n      this.nodes[id].x = e.target.x(); \r\n      this.nodes[id].y = e.target.y(); \r\n      // var arr = stage.findOne('#arr-'+1);\r\n    //  console.log(arr)\r\n      console.log(this.nodes[id].x)\r\n      console.log(this.nodes[id].y)\r\n      console.log(shape.x())\r\n      console.log(shape.y())\r\n      // console.log(onEllipse.x())\r\n      // console.log(shape.x(e.target.x()))\r\n      // this.$refs.layerTree.batchDraw();\r\n      // console.log(e.target.getAbsolutePosition().x/ stage.width())\r\n      // console.log(e.target.getAbsolutePosition().y/ stage.height())\r\n      // console.log(\"x\"+e.target.x())\r\n      e.target.getLayer().batchDraw();\r\n      // for(let i=0; i<this.arrows.length;i++){\r\n      //   if(this.arrows[i].point1 === e.target.id()){\r\n\r\n      //   }\r\n        \r\n      // }\r\n      // console.log(e.target.x())\r\n    },\r\n    onclickDrop(option){\r\n      this.selectedItem = option;\r\n      console.log(\"onchange\")\r\n      if(this.selectedItem.trim() === \"BFS\"){\r\n        this.labelResult = \"Queue\";\r\n        console.log(\"this works for queue\")\r\n        \r\n      }\r\n      else if(this.selectedItem.trim() === \"DFS\"){\r\n        this.labelResult = \"Stack\";\r\n        \r\n      }\r\n    },\r\n    addingConnection() {\r\n      this.connection = !this.connection;\r\n      this.vertex = false;\r\n      \r\n    },\r\n    addingVertex() {\r\n      this.connection = false;\r\n      this.vertex = !this.vertex;\r\n    },\r\n\r\n    clearScreen() {\r\n\r\n      console.log(\"this could work\");\r\n      this.grid= null;\r\n      this.startNode= null;\r\n      this.goalNode= null;\r\n      this.prevStartNode= '';\r\n      this.prevGoalNode='';\r\n      this.optionsStartNode=[];   \r\n      this.list= [];\r\n      this.edges= [];\r\n      this.distances= [];\r\n      this.connection= false;\r\n      this.vertex= false;\r\n      this.connections= [];\r\n      this.drawingLine= false;\r\n      this.runnableGraph= false;\r\n      this.selectedItem= \"Algorithms\";\r\n      this.coor= \"\";\r\n\r\n      const stage = this.$refs.konva.getStage();\r\n      // Clear the stage to remove all children and reset properties\r\n      stage.clear();\r\n      \r\n      \r\n      // this.theStage.clear();\r\n      this.theStage = []; \r\n\r\n      this.$forceUpdate();\r\n      // Clear the file reference\r\n      this.file = null;\r\n      // Clear the file contents\r\n      this.fileContents = null;\r\n      // Revoke the object URL\r\n      if (this.objectUrl) {\r\n        URL.revokeObjectURL(this.objectUrl);\r\n        this.objectUrl = null;\r\n      }\r\n      this.initializeGrid();\r\n     \r\n\r\n\r\n    },\r\n    onFileSelected(event) {\r\n      this.file = event.target.files[0];\r\n      let result;\r\n\r\n      if (!this.file) {\r\n        return;\r\n      }\r\n      console.log(\"this works\");\r\n      this.objectUrl = URL.createObjectURL(this.file);\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => {\r\n        console.log(\"readerworks\");\r\n        this.fileContents = event.target.result;\r\n       \r\n        result = JSON.parse(this.fileContents);\r\n        this.grid= result[\"grid\"];\r\n        this.startNode= result[\"startNode\"];\r\n        this.goalNode=  result[\"goalNode\"];\r\n        this.prevStartNode= result[\"prevStartNode\"];\r\n        this.prevGoalNode= result[\"prevGoalNode\"];\r\n        this.optionsStartNode= result[\"optionsStartNode\"];   \r\n        this.list= result[\"list\"];\r\n        this.edges= result[\"edges\"];\r\n        this.distances= result[\"distances\"];\r\n        this.connection= false;\r\n        this.vertex= true;\r\n        this.connections= result[\"connections\"];\r\n        this.drawingLine= result[\"drawingLine\"];\r\n        this.runnableGraph= result[\"runnableGraph\"];\r\n        this.selectedItem=  result[\"selectedItem\"];\r\n        this.coor= result[\"coor\"];\r\n        this.tableData = result[\"tableData\"];\r\n        this.theStage = Konva.Node.create(result[\"theStage\"], 'drawArea');\r\n      \r\n\r\n        // this.theStage =new Konva.Stage(result[\"theStage\"], 'drawArea');\r\n       \r\n\r\n        // Perform your desired action with the file contents here\r\n      };\r\n      reader.readAsText(this.file);\r\n\r\n     \r\n      \r\n      \r\n    },\r\n\r\n    handleClick(evt) {\r\n      if (this.vertex && this.list.length < 20) {\r\n        console.log(\"this works circle\");\r\n        this.optionsStartNode.push(this.list.length);\r\n        const stage = evt.target.getStage();\r\n        const pos = stage.getPointerPosition();\r\n        this.list.push(pos);\r\n        this.theStage = stage;\r\n        console.log(\"list\");\r\n        console.log(this.list);\r\n      \r\n      }\r\n    },\r\n    chooseFiles() {\r\n        document.getElementById(\"fileUpload\").click()\r\n    },\r\n    changeColorStart(){\r\n        var tween;\r\n       \r\n        var id = \"#circle\"+this.startNode;\r\n        \r\n        console.log(id);\r\n        const stage = this.theStage;\r\n        if (tween) {\r\n          tween.destroy();\r\n        }\r\n\r\n        console.log(stage);\r\n       \r\n        var shape = stage.findOne(id);\r\n         \r\n\r\n       \r\n\r\n        if(this.prevStartNode !== ''){\r\n          console.log(this.prevStartNode);\r\n          var prevShape = stage.findOne(this.prevStartNode);\r\n          tween = new Konva.Tween({\r\n            node: prevShape,\r\n            fill:\"#a20417\",\r\n            stroke:\"#a20417\"\r\n          }).play();\r\n          \r\n        }\r\n\r\n        tween = new Konva.Tween({\r\n          node: shape,\r\n          fill:\"#2f9c6e\",\r\n          stroke:\"#2f9c6e\"\r\n        }).play();\r\n        \r\n        this.prevStartNode = id;\r\n\r\n    },\r\n    \r\n    savefile(){\r\n\r\n      let result = {\r\n        grid: this.grid,\r\n        startNode: this.startNode,\r\n        goalNode: this.goalNode,\r\n        prevStartNode: this.prevStartNode,\r\n        prevGoalNode: this.prevGoalNode,\r\n        optionsStartNode: this.optionsStartNode,   \r\n        list: this.list,\r\n        edges: this.edges,\r\n        distances: this.distances,\r\n        connection: this.connection,\r\n        vertex: this.vertex,\r\n        connections: this.connections,\r\n        drawing: this.drawingLine,\r\n        runnableGraph: this.runnableGraph,\r\n        selectedItem: this.selectedItem,\r\n        coor: this.coor,\r\n        theStage: this.theStage,\r\n        tableData: this.tableData\r\n      }\r\n\r\n     \r\n      let data = JSON.stringify(result);\r\n      const blob = new Blob([data], { type: 'text/plain' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'TheGraph.txt'); // Replace with your own filename\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n\r\n\r\n      const stage = this.$refs.konva.$stage; // Get the Konva stage instance\r\n      console.log(stage);\r\n    },\r\n\r\n   \r\n\r\n    changeColorGoal(){\r\n        var tween;\r\n       \r\n        var id = \"#circle\"+this.goalNode;\r\n        console.log(id);\r\n        const stage = this.theStage;\r\n\r\n       \r\n        var shape = stage.findOne(id);\r\n         \r\n\r\n        if (tween) {\r\n          tween.destroy();\r\n        } \r\n        \r\n        if(this.prevGoalNode !== ''){\r\n          var prevShape = stage.findOne(this.prevGoalNode);\r\n          tween = new Konva.Tween({\r\n            node: prevShape,\r\n            fill:\"#a20417\",\r\n            stroke:\"#a20417\"\r\n          }).play();\r\n         \r\n        }\r\n\r\n        tween = new Konva.Tween({\r\n          node: shape,\r\n          fill:\"#004019\",\r\n          stroke:\"#004019\"\r\n        }).play();\r\n        \r\n        this.prevGoalNode = id;\r\n    },\r\n    handleMouseDown(e) {\r\n      if (this.connection) {\r\n        const onCircle = e.target instanceof Konva.Circle;\r\n        console.log(onCircle.id)\r\n        if (!onCircle) {\r\n          return;\r\n        }\r\n        this.drawingLine = true;\r\n        this.connections.push({\r\n          id: Date.now(),\r\n          points: [e.target.x(), e.target.y()],\r\n        });\r\n      }\r\n    },\r\n    handleMouseMove(e) {\r\n      if (this.connection) {\r\n        if (!this.drawingLine) {\r\n          return;\r\n        }\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        const lastLine = this.connections[this.connections.length - 1];\r\n        lastLine.points = [\r\n          lastLine.points[0],\r\n          lastLine.points[1],\r\n          pos.x,\r\n          pos.y,\r\n        ];\r\n      }\r\n    },\r\n    handleMouseUp(e) {\r\n      if (this.connection) {\r\n        const onCircle = e.target instanceof Konva.Circle;\r\n        if (!onCircle) {\r\n          return;\r\n        }\r\n        this.drawingLine = false;\r\n        const lastLine = this.connections[this.connections.length - 1];\r\n        const indexOfPoint1 = this.list.findIndex(function (point) {\r\n          return (\r\n            point.x === lastLine.points[0] && point.y === lastLine.points[1]\r\n          );\r\n        });\r\n        const indexOfPoint2 = this.list.findIndex(function (point) {\r\n          return point.x === e.target.x() && point.y === e.target.y();\r\n        });\r\n        console.log(\"Point1 = \" + indexOfPoint1 + \" Point2 = \" + indexOfPoint2);\r\n        this.tableData[indexOfPoint1+1][indexOfPoint2+1] = 1;\r\n        this.tableData[indexOfPoint2+1][indexOfPoint1+1] = 1;\r\n        var dist = Math.sqrt(\r\n          Math.pow(e.target.x() - lastLine.points[0], 2) +\r\n            Math.pow(e.target.y() - lastLine.points[1], 2)\r\n        );\r\n        this.distances.push({\r\n          id: Date.now(),\r\n          distance: dist.toFixed(2),\r\n          x:\r\n            Math.min(e.target.x(), lastLine.points[0]) +\r\n            Math.abs(e.target.x() - lastLine.points[0]) / 2 +\r\n            4,\r\n          y:\r\n            Math.min(e.target.y(), lastLine.points[1]) +\r\n            Math.abs(e.target.y() - lastLine.points[1]) / 2 +\r\n            4,\r\n        });\r\n       \r\n        this.grid[indexOfPoint1][indexOfPoint2] = this.createNode(indexOfPoint1, indexOfPoint2, dist.toFixed(2));\r\n        this.grid[indexOfPoint2][indexOfPoint1] = this.createNode(indexOfPoint2, indexOfPoint1, dist.toFixed(2));\r\n        console.log(\"CreatedLines\");\r\n        console.log(this.grid[indexOfPoint1][indexOfPoint2]);\r\n        console.log(this.grid[indexOfPoint2][indexOfPoint1]);\r\n      \r\n        lastLine.id= \"line\"+indexOfPoint1+indexOfPoint2;\r\n        lastLine.points = [\r\n          lastLine.points[0],\r\n          lastLine.points[1],\r\n          e.target.x(),\r\n          e.target.y(),\r\n        ];\r\n       \r\n        if(this.connections.length < 2){\r\n            this.runnableGraph = true\r\n        }\r\n        console.log(\"after making lines\");\r\n     \r\n        console.log(this.grid[indexOfPoint1][indexOfPoint2]);\r\n        console.log(this.grid[indexOfPoint2][indexOfPoint1]);\r\n        console.log(this.grid);\r\n     \r\n\r\n      }\r\n     \r\n\r\n    },\r\n    next(){\r\n      if((this.visitedCount+1)<this.visitedNodesInOrder.length){\r\n        this.visitedCount += 1;\r\n        this.colorNode(this.visitedNodesInOrder[this.visitedCount], \"#ed81c4\");\r\n        console.log(\"doing next\")\r\n        console.log(this.visitedNodesInOrder[this.visitedCount]);\r\n        \r\n        //adding stack table\r\n        if(this.selectedItem ===\"BFS\"){\r\n          let item = null;\r\n          const node = this.visitedNodesInOrder[this.visitedCount];\r\n          // if(this.listNodesTo.includes(node.point1)){\r\n          //   item = this.listNodesTo.shift();\r\n          //   this.outputNodes.push(item);\r\n          // }\r\n          this.listNodesFrom.push(node.point1);\r\n          this.listNodesTo.push(node.point2);\r\n        }\r\n\r\n        if(this.selectedItem ===\"DFS\"){\r\n          let item = null;\r\n          const node = this.visitedNodesInOrder[this.visitedCount];\r\n          // if(this.listNodesTo.includes(node.point1)){\r\n          //   item = this.listNodesTo.shift();\r\n          //   this.outputNodes.push(item);\r\n          // }\r\n          this.listNodesFrom.push(node.point1);\r\n          this.listNodesTo.push(node.point2);\r\n        }\r\n\r\n        if(this.selectedItem ===\"Uniform Cost\"){\r\n          const node = this.visitedNodesInOrder[this.visitedCount];\r\n        }\r\n\r\n        if(this.selectedItem == \"A*\"){\r\n            const node = this.visitedNodesInOrder[this.visitedCount];\r\n            const myTable = document.getElementById('astartable');\r\n            // Insert a new row at the end of the table\r\n            const newRow = myTable.insertRow();\r\n\r\n            // Insert cells into the new row\r\n            const cell1 = newRow.insertCell();\r\n            const cell2 = newRow.insertCell();\r\n            const cell3 = newRow.insertCell();\r\n            const cell4 = newRow.insertCell();\r\n\r\n            // Set the content of the cells\r\n            cell1.textContent = node.point2;\r\n            cell2.textContent = (node.cost.H).toFixed(2);\r\n            cell3.textContent = (node.cost.G).toFixed(2);\r\n            cell4.textContent = (node.cost.F).toFixed(2);\r\n        }\r\n        \r\n      }\r\n      if(this.visitedCount >= 1)\r\n        this.cantPlayPrev = false;\r\n      if(this.visitedCount == this.visitedNodesInOrder.length-1){\r\n        this.cantPlayNext = true;\r\n        this.cantrunShortPath = false;\r\n      }\r\n      \r\n        \r\n      \r\n    },\r\n    prev(){\r\n      if((this.visitedCount-1) >= 0){\r\n        this.undoColorNode();\r\n        this.visitedCount -= 1;\r\n        //adding stack table\r\n        if(this.selectedItem ===\"BFS\"){\r\n          let item = null;\r\n          const node = this.visitedNodesInOrder[this.visitedCount];\r\n          // if(this.listNodesTo.includes(node.point1)){\r\n          //   item = this.listNodesTo.shift();\r\n          //   this.outputNodes.push(item);\r\n          // }\r\n          this.listNodesFrom.pop(node.point1);\r\n          this.listNodesTo.pop(node.point2);\r\n        }\r\n\r\n        if(this.selectedItem ===\"DFS\"){\r\n          let item = null;\r\n          const node = this.visitedNodesInOrder[this.visitedCount];\r\n          // if(this.listNodesTo.includes(node.point1)){\r\n          //   item = this.listNodesTo.shift();\r\n          //   this.outputNodes.pop(item);\r\n          // }\r\n          this.listNodesFrom.pop(node.point1);\r\n          this.listNodesTo.pop(node.point2);\r\n        }\r\n\r\n      }\r\n      if(this.visitedCount == 0)\r\n        this.cantPlayPrev = true;\r\n\r\n      if(this.visitedCount < this.visitedNodesInOrder.length-1){\r\n        this.cantPlayNext = false;\r\n        this.cantrunShortPath = true;\r\n\r\n      }\r\n    },\r\n\r\n \r\n    createHeuristic(node){\r\n       const size = this.list.length;\r\n       const endNode= this.list[node];\r\n       console.log(\"doing the end node\")\r\n       console.log(endNode);\r\n       let heuristic = [];\r\n       \r\n\r\n       for(let i =0; i < size; i++){\r\n         var dist = Math.sqrt(\r\n            Math.pow(endNode.x - this.list[i].x, 2) +\r\n              Math.pow(endNode.y - this.list[i].y, 2)\r\n          );\r\n         heuristic.push({node: i, hval: dist});\r\n       }\r\n\r\n       return heuristic;\r\n\r\n    },\r\n    initializeGrid(){\r\n      const grid = [];\r\n      for (let row = 0; row < 10; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 10; col++) {\r\n          currentRow.push(this.createNode(row, col, 0));\r\n        }\r\n        grid.push(currentRow);\r\n      }\r\n      this.grid = grid;\r\n      console.log('This is the Initialized Grid');\r\n      console.log(this.grid);\r\n    },\r\n\r\n    //\r\n    createNode(x, y, dist){\r\n      return {\r\n        point1: x,\r\n        point2: y,\r\n        distance: dist,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        cost: {\r\n                F: Infinity,\r\n                G: Infinity,\r\n                H: Infinity,\r\n            },\r\n      }\r\n\r\n    },\r\n    \r\n    animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n      \r\n      \r\n      for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n        \r\n          setTimeout(() => {\r\n                this.colorNode(visitedNodesInOrder[i], \"#ed81c4\");\r\n          }, i*800);\r\n         \r\n\r\n        }\r\n        setTimeout(() => {\r\n                this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, visitedNodesInOrder.length*800);\r\n        \r\n    },\r\n\r\n  colorNode(visitedNode, color){\r\n          let stage = this.theStage;\r\n\r\n          var connections = this.connections;\r\n          const node = visitedNode;\r\n\r\n          var idCircle = \"#circle\"+node.point2;\r\n          console.log(idCircle);\r\n          var shape = stage.findOne(idCircle);\r\n          \r\n\r\n          \r\n          var idLine = \"line\"+node.point1+node.point2;\r\n          var idLine2 = \"line\"+node.point2+node.point1;\r\n          let idL =connections.filter(line => line.id === idLine|| line.id === idLine2);\r\n\r\n        \r\n          var idOfLine = \"#\"+idL[0].id;\r\n          var line = stage.findOne(idOfLine);\r\n\r\n        \r\n          var tweenLine = new Konva.Tween({\r\n              node: line,\r\n              \r\n              fill:color,\r\n              stroke:color\r\n          }).play();\r\n          console.log(\"Line is working\");\r\n          \r\n          var tweenShape = new Konva.Tween({\r\n            node: shape,\r\n        \r\n            fill:color,\r\n            stroke:color\r\n          }).play();\r\n         \r\n         console.log(\"Shape is working\");\r\n  },\r\n\r\n  undoColorNode( color){\r\n          let stage = this.theStage;\r\n          \r\n          // let prevNode = this.visitedNodesInOrder[this.visitedCount-1]\r\n          let visitedNode = this.visitedNodesInOrder[this.visitedCount]\r\n         \r\n\r\n          \r\n          var connections = this.connections;\r\n          const node = visitedNode;\r\n\r\n          var idCircle = \"#circle\"+node.point2;\r\n          console.log(idCircle);\r\n          var shape = stage.findOne(idCircle);\r\n          \r\n\r\n          \r\n          var idLine = \"line\"+node.point1+node.point2;\r\n          var idLine2 = \"line\"+node.point2+node.point1;\r\n          let idL =connections.filter(line => line.id === idLine|| line.id === idLine2);\r\n\r\n        \r\n          var idOfLine = \"#\"+idL[0].id;\r\n          var line = stage.findOne(idOfLine);\r\n\r\n        \r\n          var tweenLine = new Konva.Tween({\r\n              node: line,\r\n              stroke: 'black',\r\n          }).play();\r\n          console.log(\"Line is working\");\r\n          \r\n          var tweenShape = new Konva.Tween({\r\n            node: shape,\r\n        \r\n            fill: '#a20417',\r\n             //draggable:true,\r\n            stroke: '#a20417',\r\n          }).play();\r\n         \r\n         console.log(\"Shape is working\");\r\n        \r\n  },\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    \r\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n          \r\n          setTimeout(() => {\r\n                this.colorNode(nodesInShortestPathOrder[i], \"#ed4255\");\r\n          }, i*500);\r\n       \r\n    }\r\n  },\r\n  getPath(){\r\n    this.cantPlayPrev = false;\r\n    if(this.selectedItem ===\"BFS\"||this.selectedItem ===\"DFS\"){\r\n      var table = document.getElementById(\"resTable\");\r\n      // Get an array of all the td elements in the table\r\n      var tds = table.getElementsByTagName(\"td\");\r\n    }\r\n\r\n    for (let i = this.calculatedPath.length-1; i >= 1; i--) {\r\n      let node = this.calculatedPath[i];\r\n      \r\n      this.outputNodesFrom.push(node.point1);\r\n      this.outputNodesTo.push(node.point2);\r\n\r\n      if(this.selectedItem ===\"BFS\"){\r\n        let resIndex = this.listNodesFrom.indexOf(node.point1)+1;\r\n        table.rows[0].cells[resIndex].style.backgroundColor = \"#ed4255\";\r\n        table.rows[1].cells[resIndex].style.backgroundColor = \"#ed4255\";\r\n      }\r\n      if(this.selectedItem ===\"DFS\"){\r\n        let resIndex = this.listNodesTo.indexOf(node.point2)+1;\r\n        table.rows[0].cells[resIndex].style.backgroundColor = \"#ed4255\";\r\n        table.rows[1].cells[resIndex].style.backgroundColor = \"#ed4255\";\r\n      }\r\n       \r\n    }\r\n\r\n    for (let i = this.calculatedPath.length-1; i >= 1; i--) {\r\n          \r\n          setTimeout(() => {\r\n                this.colorNode(this.calculatedPath[i], \"#ed4255\");\r\n          }, i*500);\r\n       \r\n    }\r\n  },\r\n    visualizeBFS(){\r\n       const STARTNODE = this.grid[this.startNode][this.startNode];\r\n       const GOALNODE = this.goalNode;\r\n       const size = this.list.length;\r\n       return bfs(this.grid, STARTNODE, GOALNODE, size);\r\n       \r\n      \r\n    },\r\n    visualizeDFS(){\r\n       const STARTNODE = this.grid[this.startNode][this.startNode];\r\n       const GOALNODE = this.goalNode;\r\n       const size = this.list.length;\r\n       return dfs(this.grid, STARTNODE, GOALNODE, size);\r\n      \r\n      \r\n    },\r\n    visualizeAStar(){\r\n       const STARTNODE = this.grid[this.startNode][this.startNode];\r\n       const GOALNODE = this.goalNode;\r\n       const size = this.list.length;\r\n       const heuristic = this.createHeuristic(GOALNODE);\r\n       console.log(\"the heuristic chuchu\")\r\n       console.log(heuristic)\r\n\r\n      const myDiv = document.getElementById('astar');\r\n\r\n        // Create a new table element\r\n      const myTable = document.createElement('table');\r\n\r\n      // Create a header row\r\n      const headerRow = myTable.insertRow();\r\n      const headerCell1 = headerRow.insertCell();\r\n      const headerCell2 = headerRow.insertCell();\r\n      headerCell1.textContent = 'Nodes #';\r\n      headerCell2.textContent = 'Heuristic';\r\n\r\n\r\n      for (const item of heuristic) {\r\n        const row = myTable.insertRow();\r\n        const cell1 = row.insertCell();\r\n        const cell2 = row.insertCell();\r\n        cell1.textContent = item.node;\r\n        cell2.textContent = item.hval;\r\n      \r\n\r\n      }\r\n\r\n      // Append the table element to the div\r\n      myDiv.appendChild(myTable);\r\n\r\n      const otherTable = document.createElement('table');\r\n      // Create a header row\r\n      const headerRowo = otherTable.insertRow();\r\n      const headerCell1o = headerRowo.insertCell();\r\n      const headerCell2o = headerRowo.insertCell();\r\n      const headerCell3o = headerRowo.insertCell();\r\n      const headerCell4o = headerRowo.insertCell();\r\n      headerCell1o.textContent = 'Nodes #';\r\n      headerCell2o.textContent = 'H cost';\r\n      headerCell3o.textContent = 'G cost';\r\n      headerCell4o.textContent = 'F cost (H+G)';\r\n\r\n      otherTable.id = 'astartable';\r\n      otherTable.style.marginTop = '10px';\r\n\r\n      myDiv.appendChild(otherTable);\r\n\r\n       return astar(this.grid, STARTNODE, GOALNODE, size, heuristic );\r\n\r\n    },\r\n    visualizeGreedyBFS(){\r\n       const STARTNODE = this.grid[this.startNode][this.startNode];\r\n       const GOALNODE = this.goalNode;\r\n       const size = this.list.length;\r\n       const heuristic = this.createHeuristic(GOALNODE);\r\n\r\n\r\n       console.log(\"the heuristic chuchu\")\r\n       console.log(heuristic)\r\n\r\n      const myDiv = document.getElementById('heuristic');\r\n\r\n        // Create a new table element\r\n      const myTable = document.createElement('table');\r\n\r\n      // Create a header row\r\n      const headerRow = myTable.insertRow();\r\n      const headerCell1 = headerRow.insertCell();\r\n      const headerCell2 = headerRow.insertCell();\r\n      headerCell1.textContent = 'Nodes #';\r\n      headerCell2.textContent = 'Heuristic';\r\n\r\n\r\n      for (const item of heuristic) {\r\n        const row = myTable.insertRow();\r\n        const cell1 = row.insertCell();\r\n        const cell2 = row.insertCell();\r\n        cell1.textContent = item.node;\r\n        cell1.style.border = '1px solid gray';\r\n        cell2.textContent = item.hval;\r\n        cell2.style.border = '1px solid gray';\r\n        cell2.style.padding = '3px';\r\n\r\n      }\r\n\r\n      // Append the table element to the div\r\n      myDiv.appendChild(myTable);\r\n\r\n      return greedyBFS(this.grid, STARTNODE, GOALNODE, size, heuristic );\r\n      \r\n    },\r\n    visualizeUniformCost(){\r\n       const STARTNODE = this.grid[this.startNode][this.startNode];\r\n       const GOALNODE = this.goalNode;\r\n       const size = this.list.length;\r\n       const heuristic = this.createHeuristic(GOALNODE);\r\n       return uniformCost(this.grid, STARTNODE, GOALNODE, size, heuristic );\r\n \r\n    },\r\n  \r\n    runGraph(){\r\n       \r\n       if(this.runnableGraph && this.selectedItem.trim()!==\"Algorithms\") {\r\n          \r\n          const item = this.selectedItem;\r\n          if(item === \"BFS\"){\r\n            [this.visitedNodesInOrder, this.calculatedPath] = this.visualizeBFS();\r\n          }\r\n          else if(item === \"DFS\"){\r\n            [this.visitedNodesInOrder, this.calculatedPath] = this.visualizeDFS();\r\n          }\r\n          else if (item === \"A*\"){\r\n            [this.visitedNodesInOrder, this.calculatedPath] =this.visualizeAStar();\r\n          }\r\n          else if (item === \"Greedy BFS\"){\r\n            [this.visitedNodesInOrder, this.calculatedPath] = this.visualizeGreedyBFS();\r\n          }\r\n          else if (item === \"Uniform Cost\"){\r\n            [this.visitedNodesInOrder, this.calculatedPath] = this.visualizeUniformCost();\r\n          }\r\n\r\n          // this.animateAlgorithm(this.visitedNodesInOrder, this.calculatedPath);\r\n          console.log(\"this is in run graphe\");\r\n          console.log(this.visitedNodesInOrder)\r\n          console.log(this.calculatedPath)\r\n          this.cantPlayNext = false;\r\n\r\n       }\r\n    },\r\n\r\n  }\r\n\r\n}\r\n</script>"]}]}